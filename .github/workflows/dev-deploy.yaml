name: Continuous Deployment

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

jobs: 
  unit-testing:
    name: Unit-Testing
    strategy:
      matrix:
        operating_system: [ubuntu-latest]
    runs-on: ${{matrix.operating_system}} 
    environment:
      name: Dev
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Install Nginx and Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx

      - name: Start Nginx
        run: |
          sudo systemctl start nginx
          sudo systemctl enable nginx  # Optional: to enable on boot

      - name: Check Nginx Status
        run: |
          sudo systemctl status nginx

      - name: Display Nginx Version
        run: |
          nginx -v

  code-coverage:
    name: Code Coverage
    needs: [unit-testing]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nginx lcov
     
  
      - name: Download NGINX Source
        run: |
            wget http://nginx.org/download/nginx-1.25.2.tar.gz
            tar -xzvf nginx-1.25.2.tar.gz
            cd nginx-1.25.2
    
      - name: Build NGINX with Coverage
        run: |
            cd nginx-1.25.2
            ./configure --with-debug --with-cc-opt="-O0 -fprofile-arcs -ftest-coverage" --with-ld-opt="-lgcov"
            make
            sudo make install
    
      - name: Run Tests
        run: |
            # Start nginx
            sudo /usr/local/nginx/sbin/nginx
            # Example test commands, replace these with your actual tests
            curl http://localhost:80
            # Stop nginx after tests
            sudo /usr/local/nginx/sbin/nginx -s stop
    
      - name: Collect Code Coverage
        run: |
            lcov --capture --directory . --output-file coverage.info
            lcov --remove coverage.info '/usr/*' --output-file coverage.info # Optional: remove system files
            lcov --list coverage.info
    
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
            name: coverage-report
            path: coverage.info
     
  Docker:
    name: Containerization
    needs: [unit-testing, code-coverage]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
                  

      - name: Dockerhub Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD}}

      
      - name: GHCR Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      
      - name: Building Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ vars.DOCKER_USERNAME }}/my-deploy:${{ github.sha }}
      
      
      - name: List the docker images
        run: |
          docker images
          # docker run --name my-deploy -d \
          # ${{ vars.DOCKER_USERNAME }}/my-deploy:${{ github.sha }}
    
      
      - name: Docker push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/my-deploy:${{ github.sha }}
      
      
      - name: Github Container Registry Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/my-deploy:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/my-deploy:${{ github.sha }}
  
  Dev-Deploy:
         needs: Docker
         runs-on: ubuntu-latest
         steps:
           - name: checkout repo
             uses: actions/checkout@v4 
           
           - name: start minikube
             id: minikube
             uses: medyagh/setup-minikube@latest

           - name: Try the cluster!
             run: kubectl get pods


           - name: Verify Kubernetes Node
             run: kubectl get nodes
       
           - name: Verify All Pods
             run: |
               kubectl get pods -A
           
           - name: Install Ingress Controller
             run: |
               kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml
               kubectl rollout status -n ingress-nginx deploy/ingress-nginx-controller 
              

           - name: Update Ingress Service to NodePort
             run: kubectl apply -f modified-ingress-service.yaml
          
          #  - name: Get Minikube IP and NodePort for Ingress
          #    run: |
          #      MINIKUBE_IP=$(minikube ip)
          #      NODE_PORT=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.spec.ports[?(@.port==80)].nodePort}')
          #      echo "Ingress available at http://$MINIKUBE_IP:$NODE_PORT"

           
             

          #      for i in {1..5}; do
          #        echo "Iteration #$i: Checking pods"
          #        kubectl get pods -A -l app.kubernetes.io/name=ingress-nginx
          #        echo "Iteration #$i: Checking services"
          #        kubectl get svc -A -l app.kubernetes.io/name=ingress-nginx
          #        echo "Waiting for 30 seconds before next iteration..."
          #        sleep 30  # 30-second gap between iterations
          #      done


          
          #  - name: Install Minikube
          #    run: |
          #      curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          #      sudo install minikube-linux-amd64 /usr/local/bin/minikube

          #  - name: Start Minikube with Docker driver
          #    run:  minikube start --driver=docker

           
          #  - name: Install Kubectl CLI
          #    uses: azure/setup-kubectl@v4
          #    with:
          #       version: 'v1.25.0' # default is latest version

        
          #  - name: Minikube Context view
          #    run: kubectl config use-context minikube 

          #  - name: view config
          #    run: kubectl config view --minify

          #  - name: Set the minikube Config file
          #    uses: azure/k8s-set-context@v4
          #    with:
          #     method: kubeconfig
          #     kubeconfig: ${{ secrets.KUBE_CONFIG }}
           
          #  - name: Fetch Minikube cluster details
          #    run: |
          #       minikube addons enable ingress
          #       minikube version --short
          #       echo -------------------------
          #       kubectl get nodes
          #       kubectl get pods
          #       kubectl get pods -n kube-system
            